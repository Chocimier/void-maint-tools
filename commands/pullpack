#!/usr/bin/env fish
#
# Fetches PR and builds package.
#
# Install userjs file in browser, triple-click on command under PR page title, middle click in terminal.

function main

assert_xbps_src_dir

# parse arguments
set flags \
	r/remote= \
	u/url= \
	b/branch= \
	n/number= \
	p/pkgname= \
	B/no-build \
	f/fetch-only \
	m/many-targets \
	e/edit \
	i/interactive-rebase


if not test "$argv"
	echo $flags
	exit 1
end

argparse $flags -- $argv
set -l remote
set -l url
set -l branch
set -l pkgname

if set -q _flag_number
	# error on too many flags
	if begin; set -q _flag_remote; or set -q _flag_url; or set -q _flag_branch; end
		echo "Flag -n can't be combined with -r, -u or -b."
		exit 2
	end

	if test "$_flag_pkgname"
		set pkgname $_flag_pkgname
	end
	set remote origin
	set branch pull/$_flag_number/head
else
	# error if arguments lack
	set remote $_flag_remote

	set branch $_flag_branch

	# guess pkgname if not given
	set pkgname $_flag_pkgname
	if test -z "$pkgname"
		set pkgname $branch
	end
	set url $_flag_url
end
test "$branch"; or begin echo pass --branch; exit 2; end
test "$remote"; or begin echo pass --remote; exit 2; end

# configure remote
if git config 'remote.'$remote'.url' > /dev/null
	if test "$url"
		git remote set-url $remote $url
	end
else
	if set -q _flag_number
		echo Missing '"'$remote'"' remote
		exit 2
	end
	if test -z "$url"
		echo pass --url
		exit 2
	end
	git remote add $remote $url
end

# fetch
git fetch --prune $remote $branch
if set -q _flag_fetch_only
	exit
end
git checkout FETCH_HEAD; or exit 3
git fetch origin
if set -q _flag_i
	set rebase_flags -i
end
git rebase --autostash $rebase_flags origin/master; or exit 4

# build
if begin; test "$pkgname"; and not set -q _flag_B; end
	if set -q _flag_e
		find srcpkgs/$pkgname -type f -exec (string split ' ' $EDITOR) '{}' '+'
	else if set -q _flag_m
		fourpack $pkgname
	else
		pack $pkgname
	end
end

end # main

main $argv
